/*
auth

auth

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// UserMFAType the model 'UserMFAType'
type UserMFAType string

// List of UserMFAType
const (
	NONE UserMFAType = "none"
	TOTP UserMFAType = "totp"
	EMAIL UserMFAType = "email"
	TEXT UserMFAType = "text"
)

// All allowed values of UserMFAType enum
var AllowedUserMFATypeEnumValues = []UserMFAType{
	"none",
	"totp",
	"email",
	"text",
}

func (v *UserMFAType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := UserMFAType(value)
	for _, existing := range AllowedUserMFATypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid UserMFAType", value)
}

// NewUserMFATypeFromValue returns a pointer to a valid UserMFAType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewUserMFATypeFromValue(v string) (*UserMFAType, error) {
	ev := UserMFAType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for UserMFAType: valid values are %v", v, AllowedUserMFATypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v UserMFAType) IsValid() bool {
	for _, existing := range AllowedUserMFATypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to UserMFAType value
func (v UserMFAType) Ptr() *UserMFAType {
	return &v
}

type NullableUserMFAType struct {
	value *UserMFAType
	isSet bool
}

func (v NullableUserMFAType) Get() *UserMFAType {
	return v.value
}

func (v *NullableUserMFAType) Set(val *UserMFAType) {
	v.value = val
	v.isSet = true
}

func (v NullableUserMFAType) IsSet() bool {
	return v.isSet
}

func (v *NullableUserMFAType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserMFAType(val *UserMFAType) *NullableUserMFAType {
	return &NullableUserMFAType{value: val, isSet: true}
}

func (v NullableUserMFAType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserMFAType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

