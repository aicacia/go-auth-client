/*
auth

auth

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"gopkg.in/validator.v2"
	"fmt"
)

// MFARequest - struct for MFARequest
type MFARequest struct {
	MFARequestOneOf *MFARequestOneOf
	MFARequestOneOf1 *MFARequestOneOf1
}

// MFARequestOneOfAsMFARequest is a convenience function that returns MFARequestOneOf wrapped in MFARequest
func MFARequestOneOfAsMFARequest(v *MFARequestOneOf) MFARequest {
	return MFARequest{
		MFARequestOneOf: v,
	}
}

// MFARequestOneOf1AsMFARequest is a convenience function that returns MFARequestOneOf1 wrapped in MFARequest
func MFARequestOneOf1AsMFARequest(v *MFARequestOneOf1) MFARequest {
	return MFARequest{
		MFARequestOneOf1: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *MFARequest) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into MFARequestOneOf
	err = newStrictDecoder(data).Decode(&dst.MFARequestOneOf)
	if err == nil {
		jsonMFARequestOneOf, _ := json.Marshal(dst.MFARequestOneOf)
		if string(jsonMFARequestOneOf) == "{}" { // empty struct
			dst.MFARequestOneOf = nil
		} else {
			if err = validator.Validate(dst.MFARequestOneOf); err != nil {
				dst.MFARequestOneOf = nil
			} else {
				match++
			}
		}
	} else {
		dst.MFARequestOneOf = nil
	}

	// try to unmarshal data into MFARequestOneOf1
	err = newStrictDecoder(data).Decode(&dst.MFARequestOneOf1)
	if err == nil {
		jsonMFARequestOneOf1, _ := json.Marshal(dst.MFARequestOneOf1)
		if string(jsonMFARequestOneOf1) == "{}" { // empty struct
			dst.MFARequestOneOf1 = nil
		} else {
			if err = validator.Validate(dst.MFARequestOneOf1); err != nil {
				dst.MFARequestOneOf1 = nil
			} else {
				match++
			}
		}
	} else {
		dst.MFARequestOneOf1 = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.MFARequestOneOf = nil
		dst.MFARequestOneOf1 = nil

		return fmt.Errorf("data matches more than one schema in oneOf(MFARequest)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(MFARequest)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src MFARequest) MarshalJSON() ([]byte, error) {
	if src.MFARequestOneOf != nil {
		return json.Marshal(&src.MFARequestOneOf)
	}

	if src.MFARequestOneOf1 != nil {
		return json.Marshal(&src.MFARequestOneOf1)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *MFARequest) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.MFARequestOneOf != nil {
		return obj.MFARequestOneOf
	}

	if obj.MFARequestOneOf1 != nil {
		return obj.MFARequestOneOf1
	}

	// all schemas are nil
	return nil
}

type NullableMFARequest struct {
	value *MFARequest
	isSet bool
}

func (v NullableMFARequest) Get() *MFARequest {
	return v.value
}

func (v *NullableMFARequest) Set(val *MFARequest) {
	v.value = val
	v.isSet = true
}

func (v NullableMFARequest) IsSet() bool {
	return v.isSet
}

func (v *NullableMFARequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMFARequest(val *MFARequest) *NullableMFARequest {
	return &NullableMFARequest{value: val, isSet: true}
}

func (v NullableMFARequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMFARequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


