/*
auth

auth

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the UserOAuth2Provider type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserOAuth2Provider{}

// UserOAuth2Provider struct for UserOAuth2Provider
type UserOAuth2Provider struct {
	CreatedAt time.Time `json:"created_at"`
	Email NullableString `json:"email,omitempty"`
	Id int64 `json:"id"`
	TenentOauth2ProviderId int64 `json:"tenent_oauth2_provider_id"`
	UpdatedAt time.Time `json:"updated_at"`
}

type _UserOAuth2Provider UserOAuth2Provider

// NewUserOAuth2Provider instantiates a new UserOAuth2Provider object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserOAuth2Provider(createdAt time.Time, id int64, tenentOauth2ProviderId int64, updatedAt time.Time) *UserOAuth2Provider {
	this := UserOAuth2Provider{}
	this.CreatedAt = createdAt
	this.Id = id
	this.TenentOauth2ProviderId = tenentOauth2ProviderId
	this.UpdatedAt = updatedAt
	return &this
}

// NewUserOAuth2ProviderWithDefaults instantiates a new UserOAuth2Provider object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserOAuth2ProviderWithDefaults() *UserOAuth2Provider {
	this := UserOAuth2Provider{}
	return &this
}

// GetCreatedAt returns the CreatedAt field value
func (o *UserOAuth2Provider) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *UserOAuth2Provider) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *UserOAuth2Provider) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetEmail returns the Email field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserOAuth2Provider) GetEmail() string {
	if o == nil || IsNil(o.Email.Get()) {
		var ret string
		return ret
	}
	return *o.Email.Get()
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserOAuth2Provider) GetEmailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Email.Get(), o.Email.IsSet()
}

// HasEmail returns a boolean if a field has been set.
func (o *UserOAuth2Provider) HasEmail() bool {
	if o != nil && o.Email.IsSet() {
		return true
	}

	return false
}

// SetEmail gets a reference to the given NullableString and assigns it to the Email field.
func (o *UserOAuth2Provider) SetEmail(v string) {
	o.Email.Set(&v)
}
// SetEmailNil sets the value for Email to be an explicit nil
func (o *UserOAuth2Provider) SetEmailNil() {
	o.Email.Set(nil)
}

// UnsetEmail ensures that no value is present for Email, not even an explicit nil
func (o *UserOAuth2Provider) UnsetEmail() {
	o.Email.Unset()
}

// GetId returns the Id field value
func (o *UserOAuth2Provider) GetId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *UserOAuth2Provider) GetIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *UserOAuth2Provider) SetId(v int64) {
	o.Id = v
}

// GetTenentOauth2ProviderId returns the TenentOauth2ProviderId field value
func (o *UserOAuth2Provider) GetTenentOauth2ProviderId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.TenentOauth2ProviderId
}

// GetTenentOauth2ProviderIdOk returns a tuple with the TenentOauth2ProviderId field value
// and a boolean to check if the value has been set.
func (o *UserOAuth2Provider) GetTenentOauth2ProviderIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TenentOauth2ProviderId, true
}

// SetTenentOauth2ProviderId sets field value
func (o *UserOAuth2Provider) SetTenentOauth2ProviderId(v int64) {
	o.TenentOauth2ProviderId = v
}

// GetUpdatedAt returns the UpdatedAt field value
func (o *UserOAuth2Provider) GetUpdatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
func (o *UserOAuth2Provider) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedAt, true
}

// SetUpdatedAt sets field value
func (o *UserOAuth2Provider) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = v
}

func (o UserOAuth2Provider) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserOAuth2Provider) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["created_at"] = o.CreatedAt
	if o.Email.IsSet() {
		toSerialize["email"] = o.Email.Get()
	}
	toSerialize["id"] = o.Id
	toSerialize["tenent_oauth2_provider_id"] = o.TenentOauth2ProviderId
	toSerialize["updated_at"] = o.UpdatedAt
	return toSerialize, nil
}

func (o *UserOAuth2Provider) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"created_at",
		"id",
		"tenent_oauth2_provider_id",
		"updated_at",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUserOAuth2Provider := _UserOAuth2Provider{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUserOAuth2Provider)

	if err != nil {
		return err
	}

	*o = UserOAuth2Provider(varUserOAuth2Provider)

	return err
}

type NullableUserOAuth2Provider struct {
	value *UserOAuth2Provider
	isSet bool
}

func (v NullableUserOAuth2Provider) Get() *UserOAuth2Provider {
	return v.value
}

func (v *NullableUserOAuth2Provider) Set(val *UserOAuth2Provider) {
	v.value = val
	v.isSet = true
}

func (v NullableUserOAuth2Provider) IsSet() bool {
	return v.isSet
}

func (v *NullableUserOAuth2Provider) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserOAuth2Provider(val *UserOAuth2Provider) *NullableUserOAuth2Provider {
	return &NullableUserOAuth2Provider{value: val, isSet: true}
}

func (v NullableUserOAuth2Provider) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserOAuth2Provider) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


