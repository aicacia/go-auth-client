/*
auth

auth

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the UserTOTP type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserTOTP{}

// UserTOTP struct for UserTOTP
type UserTOTP struct {
	Algorithm string `json:"algorithm"`
	CreatedAt time.Time `json:"created_at"`
	Digits int64 `json:"digits"`
	Secret NullableString `json:"secret,omitempty"`
	Step int64 `json:"step"`
	UpdatedAt time.Time `json:"updated_at"`
}

type _UserTOTP UserTOTP

// NewUserTOTP instantiates a new UserTOTP object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserTOTP(algorithm string, createdAt time.Time, digits int64, step int64, updatedAt time.Time) *UserTOTP {
	this := UserTOTP{}
	this.Algorithm = algorithm
	this.CreatedAt = createdAt
	this.Digits = digits
	this.Step = step
	this.UpdatedAt = updatedAt
	return &this
}

// NewUserTOTPWithDefaults instantiates a new UserTOTP object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserTOTPWithDefaults() *UserTOTP {
	this := UserTOTP{}
	return &this
}

// GetAlgorithm returns the Algorithm field value
func (o *UserTOTP) GetAlgorithm() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Algorithm
}

// GetAlgorithmOk returns a tuple with the Algorithm field value
// and a boolean to check if the value has been set.
func (o *UserTOTP) GetAlgorithmOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Algorithm, true
}

// SetAlgorithm sets field value
func (o *UserTOTP) SetAlgorithm(v string) {
	o.Algorithm = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *UserTOTP) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *UserTOTP) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *UserTOTP) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetDigits returns the Digits field value
func (o *UserTOTP) GetDigits() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Digits
}

// GetDigitsOk returns a tuple with the Digits field value
// and a boolean to check if the value has been set.
func (o *UserTOTP) GetDigitsOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Digits, true
}

// SetDigits sets field value
func (o *UserTOTP) SetDigits(v int64) {
	o.Digits = v
}

// GetSecret returns the Secret field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserTOTP) GetSecret() string {
	if o == nil || IsNil(o.Secret.Get()) {
		var ret string
		return ret
	}
	return *o.Secret.Get()
}

// GetSecretOk returns a tuple with the Secret field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserTOTP) GetSecretOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Secret.Get(), o.Secret.IsSet()
}

// HasSecret returns a boolean if a field has been set.
func (o *UserTOTP) HasSecret() bool {
	if o != nil && o.Secret.IsSet() {
		return true
	}

	return false
}

// SetSecret gets a reference to the given NullableString and assigns it to the Secret field.
func (o *UserTOTP) SetSecret(v string) {
	o.Secret.Set(&v)
}
// SetSecretNil sets the value for Secret to be an explicit nil
func (o *UserTOTP) SetSecretNil() {
	o.Secret.Set(nil)
}

// UnsetSecret ensures that no value is present for Secret, not even an explicit nil
func (o *UserTOTP) UnsetSecret() {
	o.Secret.Unset()
}

// GetStep returns the Step field value
func (o *UserTOTP) GetStep() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Step
}

// GetStepOk returns a tuple with the Step field value
// and a boolean to check if the value has been set.
func (o *UserTOTP) GetStepOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Step, true
}

// SetStep sets field value
func (o *UserTOTP) SetStep(v int64) {
	o.Step = v
}

// GetUpdatedAt returns the UpdatedAt field value
func (o *UserTOTP) GetUpdatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
func (o *UserTOTP) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedAt, true
}

// SetUpdatedAt sets field value
func (o *UserTOTP) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = v
}

func (o UserTOTP) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserTOTP) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["algorithm"] = o.Algorithm
	toSerialize["created_at"] = o.CreatedAt
	toSerialize["digits"] = o.Digits
	if o.Secret.IsSet() {
		toSerialize["secret"] = o.Secret.Get()
	}
	toSerialize["step"] = o.Step
	toSerialize["updated_at"] = o.UpdatedAt
	return toSerialize, nil
}

func (o *UserTOTP) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"algorithm",
		"created_at",
		"digits",
		"step",
		"updated_at",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUserTOTP := _UserTOTP{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUserTOTP)

	if err != nil {
		return err
	}

	*o = UserTOTP(varUserTOTP)

	return err
}

type NullableUserTOTP struct {
	value *UserTOTP
	isSet bool
}

func (v NullableUserTOTP) Get() *UserTOTP {
	return v.value
}

func (v *NullableUserTOTP) Set(val *UserTOTP) {
	v.value = val
	v.isSet = true
}

func (v NullableUserTOTP) IsSet() bool {
	return v.isSet
}

func (v *NullableUserTOTP) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserTOTP(val *UserTOTP) *NullableUserTOTP {
	return &NullableUserTOTP{value: val, isSet: true}
}

func (v NullableUserTOTP) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserTOTP) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


