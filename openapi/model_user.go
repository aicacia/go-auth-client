/*
auth

auth

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the User type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &User{}

// User struct for User
type User struct {
	Active bool `json:"active"`
	Config NullableUserConfig `json:"config,omitempty"`
	CreatedAt time.Time `json:"created_at"`
	Email NullableUserEmail `json:"email,omitempty"`
	Emails []UserEmail `json:"emails"`
	Id int64 `json:"id"`
	Info UserInfo `json:"info"`
	MfaTypes []UserMFAType `json:"mfa_types"`
	Oauth2Providers []UserOAuth2Provider `json:"oauth2_providers"`
	PhoneNumber NullableUserPhoneNumber `json:"phone_number,omitempty"`
	PhoneNumbers []UserPhoneNumber `json:"phone_numbers"`
	UpdatedAt time.Time `json:"updated_at"`
	Username string `json:"username"`
}

type _User User

// NewUser instantiates a new User object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUser(active bool, createdAt time.Time, emails []UserEmail, id int64, info UserInfo, mfaTypes []UserMFAType, oauth2Providers []UserOAuth2Provider, phoneNumbers []UserPhoneNumber, updatedAt time.Time, username string) *User {
	this := User{}
	this.Active = active
	this.CreatedAt = createdAt
	this.Emails = emails
	this.Id = id
	this.Info = info
	this.MfaTypes = mfaTypes
	this.Oauth2Providers = oauth2Providers
	this.PhoneNumbers = phoneNumbers
	this.UpdatedAt = updatedAt
	this.Username = username
	return &this
}

// NewUserWithDefaults instantiates a new User object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserWithDefaults() *User {
	this := User{}
	return &this
}

// GetActive returns the Active field value
func (o *User) GetActive() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Active
}

// GetActiveOk returns a tuple with the Active field value
// and a boolean to check if the value has been set.
func (o *User) GetActiveOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Active, true
}

// SetActive sets field value
func (o *User) SetActive(v bool) {
	o.Active = v
}

// GetConfig returns the Config field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *User) GetConfig() UserConfig {
	if o == nil || IsNil(o.Config.Get()) {
		var ret UserConfig
		return ret
	}
	return *o.Config.Get()
}

// GetConfigOk returns a tuple with the Config field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *User) GetConfigOk() (*UserConfig, bool) {
	if o == nil {
		return nil, false
	}
	return o.Config.Get(), o.Config.IsSet()
}

// HasConfig returns a boolean if a field has been set.
func (o *User) HasConfig() bool {
	if o != nil && o.Config.IsSet() {
		return true
	}

	return false
}

// SetConfig gets a reference to the given NullableUserConfig and assigns it to the Config field.
func (o *User) SetConfig(v UserConfig) {
	o.Config.Set(&v)
}
// SetConfigNil sets the value for Config to be an explicit nil
func (o *User) SetConfigNil() {
	o.Config.Set(nil)
}

// UnsetConfig ensures that no value is present for Config, not even an explicit nil
func (o *User) UnsetConfig() {
	o.Config.Unset()
}

// GetCreatedAt returns the CreatedAt field value
func (o *User) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *User) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *User) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetEmail returns the Email field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *User) GetEmail() UserEmail {
	if o == nil || IsNil(o.Email.Get()) {
		var ret UserEmail
		return ret
	}
	return *o.Email.Get()
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *User) GetEmailOk() (*UserEmail, bool) {
	if o == nil {
		return nil, false
	}
	return o.Email.Get(), o.Email.IsSet()
}

// HasEmail returns a boolean if a field has been set.
func (o *User) HasEmail() bool {
	if o != nil && o.Email.IsSet() {
		return true
	}

	return false
}

// SetEmail gets a reference to the given NullableUserEmail and assigns it to the Email field.
func (o *User) SetEmail(v UserEmail) {
	o.Email.Set(&v)
}
// SetEmailNil sets the value for Email to be an explicit nil
func (o *User) SetEmailNil() {
	o.Email.Set(nil)
}

// UnsetEmail ensures that no value is present for Email, not even an explicit nil
func (o *User) UnsetEmail() {
	o.Email.Unset()
}

// GetEmails returns the Emails field value
func (o *User) GetEmails() []UserEmail {
	if o == nil {
		var ret []UserEmail
		return ret
	}

	return o.Emails
}

// GetEmailsOk returns a tuple with the Emails field value
// and a boolean to check if the value has been set.
func (o *User) GetEmailsOk() ([]UserEmail, bool) {
	if o == nil {
		return nil, false
	}
	return o.Emails, true
}

// SetEmails sets field value
func (o *User) SetEmails(v []UserEmail) {
	o.Emails = v
}

// GetId returns the Id field value
func (o *User) GetId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *User) GetIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *User) SetId(v int64) {
	o.Id = v
}

// GetInfo returns the Info field value
func (o *User) GetInfo() UserInfo {
	if o == nil {
		var ret UserInfo
		return ret
	}

	return o.Info
}

// GetInfoOk returns a tuple with the Info field value
// and a boolean to check if the value has been set.
func (o *User) GetInfoOk() (*UserInfo, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Info, true
}

// SetInfo sets field value
func (o *User) SetInfo(v UserInfo) {
	o.Info = v
}

// GetMfaTypes returns the MfaTypes field value
func (o *User) GetMfaTypes() []UserMFAType {
	if o == nil {
		var ret []UserMFAType
		return ret
	}

	return o.MfaTypes
}

// GetMfaTypesOk returns a tuple with the MfaTypes field value
// and a boolean to check if the value has been set.
func (o *User) GetMfaTypesOk() ([]UserMFAType, bool) {
	if o == nil {
		return nil, false
	}
	return o.MfaTypes, true
}

// SetMfaTypes sets field value
func (o *User) SetMfaTypes(v []UserMFAType) {
	o.MfaTypes = v
}

// GetOauth2Providers returns the Oauth2Providers field value
func (o *User) GetOauth2Providers() []UserOAuth2Provider {
	if o == nil {
		var ret []UserOAuth2Provider
		return ret
	}

	return o.Oauth2Providers
}

// GetOauth2ProvidersOk returns a tuple with the Oauth2Providers field value
// and a boolean to check if the value has been set.
func (o *User) GetOauth2ProvidersOk() ([]UserOAuth2Provider, bool) {
	if o == nil {
		return nil, false
	}
	return o.Oauth2Providers, true
}

// SetOauth2Providers sets field value
func (o *User) SetOauth2Providers(v []UserOAuth2Provider) {
	o.Oauth2Providers = v
}

// GetPhoneNumber returns the PhoneNumber field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *User) GetPhoneNumber() UserPhoneNumber {
	if o == nil || IsNil(o.PhoneNumber.Get()) {
		var ret UserPhoneNumber
		return ret
	}
	return *o.PhoneNumber.Get()
}

// GetPhoneNumberOk returns a tuple with the PhoneNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *User) GetPhoneNumberOk() (*UserPhoneNumber, bool) {
	if o == nil {
		return nil, false
	}
	return o.PhoneNumber.Get(), o.PhoneNumber.IsSet()
}

// HasPhoneNumber returns a boolean if a field has been set.
func (o *User) HasPhoneNumber() bool {
	if o != nil && o.PhoneNumber.IsSet() {
		return true
	}

	return false
}

// SetPhoneNumber gets a reference to the given NullableUserPhoneNumber and assigns it to the PhoneNumber field.
func (o *User) SetPhoneNumber(v UserPhoneNumber) {
	o.PhoneNumber.Set(&v)
}
// SetPhoneNumberNil sets the value for PhoneNumber to be an explicit nil
func (o *User) SetPhoneNumberNil() {
	o.PhoneNumber.Set(nil)
}

// UnsetPhoneNumber ensures that no value is present for PhoneNumber, not even an explicit nil
func (o *User) UnsetPhoneNumber() {
	o.PhoneNumber.Unset()
}

// GetPhoneNumbers returns the PhoneNumbers field value
func (o *User) GetPhoneNumbers() []UserPhoneNumber {
	if o == nil {
		var ret []UserPhoneNumber
		return ret
	}

	return o.PhoneNumbers
}

// GetPhoneNumbersOk returns a tuple with the PhoneNumbers field value
// and a boolean to check if the value has been set.
func (o *User) GetPhoneNumbersOk() ([]UserPhoneNumber, bool) {
	if o == nil {
		return nil, false
	}
	return o.PhoneNumbers, true
}

// SetPhoneNumbers sets field value
func (o *User) SetPhoneNumbers(v []UserPhoneNumber) {
	o.PhoneNumbers = v
}

// GetUpdatedAt returns the UpdatedAt field value
func (o *User) GetUpdatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
func (o *User) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedAt, true
}

// SetUpdatedAt sets field value
func (o *User) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = v
}

// GetUsername returns the Username field value
func (o *User) GetUsername() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Username
}

// GetUsernameOk returns a tuple with the Username field value
// and a boolean to check if the value has been set.
func (o *User) GetUsernameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Username, true
}

// SetUsername sets field value
func (o *User) SetUsername(v string) {
	o.Username = v
}

func (o User) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o User) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["active"] = o.Active
	if o.Config.IsSet() {
		toSerialize["config"] = o.Config.Get()
	}
	toSerialize["created_at"] = o.CreatedAt
	if o.Email.IsSet() {
		toSerialize["email"] = o.Email.Get()
	}
	toSerialize["emails"] = o.Emails
	toSerialize["id"] = o.Id
	toSerialize["info"] = o.Info
	toSerialize["mfa_types"] = o.MfaTypes
	toSerialize["oauth2_providers"] = o.Oauth2Providers
	if o.PhoneNumber.IsSet() {
		toSerialize["phone_number"] = o.PhoneNumber.Get()
	}
	toSerialize["phone_numbers"] = o.PhoneNumbers
	toSerialize["updated_at"] = o.UpdatedAt
	toSerialize["username"] = o.Username
	return toSerialize, nil
}

func (o *User) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"active",
		"created_at",
		"emails",
		"id",
		"info",
		"mfa_types",
		"oauth2_providers",
		"phone_numbers",
		"updated_at",
		"username",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUser := _User{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUser)

	if err != nil {
		return err
	}

	*o = User(varUser)

	return err
}

type NullableUser struct {
	value *User
	isSet bool
}

func (v NullableUser) Get() *User {
	return v.value
}

func (v *NullableUser) Set(val *User) {
	v.value = val
	v.isSet = true
}

func (v NullableUser) IsSet() bool {
	return v.isSet
}

func (v *NullableUser) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUser(val *User) *NullableUser {
	return &NullableUser{value: val, isSet: true}
}

func (v NullableUser) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUser) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


