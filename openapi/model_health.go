/*
auth

auth

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Health type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Health{}

// Health struct for Health
type Health struct {
	Db bool `json:"db"`
}

type _Health Health

// NewHealth instantiates a new Health object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHealth(db bool) *Health {
	this := Health{}
	this.Db = db
	return &this
}

// NewHealthWithDefaults instantiates a new Health object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHealthWithDefaults() *Health {
	this := Health{}
	return &this
}

// GetDb returns the Db field value
func (o *Health) GetDb() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Db
}

// GetDbOk returns a tuple with the Db field value
// and a boolean to check if the value has been set.
func (o *Health) GetDbOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Db, true
}

// SetDb sets field value
func (o *Health) SetDb(v bool) {
	o.Db = v
}

func (o Health) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Health) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["db"] = o.Db
	return toSerialize, nil
}

func (o *Health) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"db",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varHealth := _Health{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varHealth)

	if err != nil {
		return err
	}

	*o = Health(varHealth)

	return err
}

type NullableHealth struct {
	value *Health
	isSet bool
}

func (v NullableHealth) Get() *Health {
	return v.value
}

func (v *NullableHealth) Set(val *Health) {
	v.value = val
	v.isSet = true
}

func (v NullableHealth) IsSet() bool {
	return v.isSet
}

func (v *NullableHealth) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHealth(val *Health) *NullableHealth {
	return &NullableHealth{value: val, isSet: true}
}

func (v NullableHealth) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHealth) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


