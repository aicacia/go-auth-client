/*
auth

auth

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"gopkg.in/validator.v2"
	"fmt"
)

// TokenRequest - struct for TokenRequest
type TokenRequest struct {
	TokenRequestOneOf *TokenRequestOneOf
	TokenRequestOneOf1 *TokenRequestOneOf1
	TokenRequestOneOf2 *TokenRequestOneOf2
	TokenRequestOneOf3 *TokenRequestOneOf3
}

// TokenRequestOneOfAsTokenRequest is a convenience function that returns TokenRequestOneOf wrapped in TokenRequest
func TokenRequestOneOfAsTokenRequest(v *TokenRequestOneOf) TokenRequest {
	return TokenRequest{
		TokenRequestOneOf: v,
	}
}

// TokenRequestOneOf1AsTokenRequest is a convenience function that returns TokenRequestOneOf1 wrapped in TokenRequest
func TokenRequestOneOf1AsTokenRequest(v *TokenRequestOneOf1) TokenRequest {
	return TokenRequest{
		TokenRequestOneOf1: v,
	}
}

// TokenRequestOneOf2AsTokenRequest is a convenience function that returns TokenRequestOneOf2 wrapped in TokenRequest
func TokenRequestOneOf2AsTokenRequest(v *TokenRequestOneOf2) TokenRequest {
	return TokenRequest{
		TokenRequestOneOf2: v,
	}
}

// TokenRequestOneOf3AsTokenRequest is a convenience function that returns TokenRequestOneOf3 wrapped in TokenRequest
func TokenRequestOneOf3AsTokenRequest(v *TokenRequestOneOf3) TokenRequest {
	return TokenRequest{
		TokenRequestOneOf3: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *TokenRequest) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into TokenRequestOneOf
	err = newStrictDecoder(data).Decode(&dst.TokenRequestOneOf)
	if err == nil {
		jsonTokenRequestOneOf, _ := json.Marshal(dst.TokenRequestOneOf)
		if string(jsonTokenRequestOneOf) == "{}" { // empty struct
			dst.TokenRequestOneOf = nil
		} else {
			if err = validator.Validate(dst.TokenRequestOneOf); err != nil {
				dst.TokenRequestOneOf = nil
			} else {
				match++
			}
		}
	} else {
		dst.TokenRequestOneOf = nil
	}

	// try to unmarshal data into TokenRequestOneOf1
	err = newStrictDecoder(data).Decode(&dst.TokenRequestOneOf1)
	if err == nil {
		jsonTokenRequestOneOf1, _ := json.Marshal(dst.TokenRequestOneOf1)
		if string(jsonTokenRequestOneOf1) == "{}" { // empty struct
			dst.TokenRequestOneOf1 = nil
		} else {
			if err = validator.Validate(dst.TokenRequestOneOf1); err != nil {
				dst.TokenRequestOneOf1 = nil
			} else {
				match++
			}
		}
	} else {
		dst.TokenRequestOneOf1 = nil
	}

	// try to unmarshal data into TokenRequestOneOf2
	err = newStrictDecoder(data).Decode(&dst.TokenRequestOneOf2)
	if err == nil {
		jsonTokenRequestOneOf2, _ := json.Marshal(dst.TokenRequestOneOf2)
		if string(jsonTokenRequestOneOf2) == "{}" { // empty struct
			dst.TokenRequestOneOf2 = nil
		} else {
			if err = validator.Validate(dst.TokenRequestOneOf2); err != nil {
				dst.TokenRequestOneOf2 = nil
			} else {
				match++
			}
		}
	} else {
		dst.TokenRequestOneOf2 = nil
	}

	// try to unmarshal data into TokenRequestOneOf3
	err = newStrictDecoder(data).Decode(&dst.TokenRequestOneOf3)
	if err == nil {
		jsonTokenRequestOneOf3, _ := json.Marshal(dst.TokenRequestOneOf3)
		if string(jsonTokenRequestOneOf3) == "{}" { // empty struct
			dst.TokenRequestOneOf3 = nil
		} else {
			if err = validator.Validate(dst.TokenRequestOneOf3); err != nil {
				dst.TokenRequestOneOf3 = nil
			} else {
				match++
			}
		}
	} else {
		dst.TokenRequestOneOf3 = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.TokenRequestOneOf = nil
		dst.TokenRequestOneOf1 = nil
		dst.TokenRequestOneOf2 = nil
		dst.TokenRequestOneOf3 = nil

		return fmt.Errorf("data matches more than one schema in oneOf(TokenRequest)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(TokenRequest)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src TokenRequest) MarshalJSON() ([]byte, error) {
	if src.TokenRequestOneOf != nil {
		return json.Marshal(&src.TokenRequestOneOf)
	}

	if src.TokenRequestOneOf1 != nil {
		return json.Marshal(&src.TokenRequestOneOf1)
	}

	if src.TokenRequestOneOf2 != nil {
		return json.Marshal(&src.TokenRequestOneOf2)
	}

	if src.TokenRequestOneOf3 != nil {
		return json.Marshal(&src.TokenRequestOneOf3)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *TokenRequest) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.TokenRequestOneOf != nil {
		return obj.TokenRequestOneOf
	}

	if obj.TokenRequestOneOf1 != nil {
		return obj.TokenRequestOneOf1
	}

	if obj.TokenRequestOneOf2 != nil {
		return obj.TokenRequestOneOf2
	}

	if obj.TokenRequestOneOf3 != nil {
		return obj.TokenRequestOneOf3
	}

	// all schemas are nil
	return nil
}

type NullableTokenRequest struct {
	value *TokenRequest
	isSet bool
}

func (v NullableTokenRequest) Get() *TokenRequest {
	return v.value
}

func (v *NullableTokenRequest) Set(val *TokenRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableTokenRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableTokenRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTokenRequest(val *TokenRequest) *NullableTokenRequest {
	return &NullableTokenRequest{value: val, isSet: true}
}

func (v NullableTokenRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTokenRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


