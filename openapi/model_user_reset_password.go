/*
auth

auth

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the UserResetPassword type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserResetPassword{}

// UserResetPassword struct for UserResetPassword
type UserResetPassword struct {
	Scope NullableString `json:"scope,omitempty"`
	TenentId int64 `json:"tenent_id"`
}

type _UserResetPassword UserResetPassword

// NewUserResetPassword instantiates a new UserResetPassword object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserResetPassword(tenentId int64) *UserResetPassword {
	this := UserResetPassword{}
	this.TenentId = tenentId
	return &this
}

// NewUserResetPasswordWithDefaults instantiates a new UserResetPassword object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserResetPasswordWithDefaults() *UserResetPassword {
	this := UserResetPassword{}
	return &this
}

// GetScope returns the Scope field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserResetPassword) GetScope() string {
	if o == nil || IsNil(o.Scope.Get()) {
		var ret string
		return ret
	}
	return *o.Scope.Get()
}

// GetScopeOk returns a tuple with the Scope field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserResetPassword) GetScopeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Scope.Get(), o.Scope.IsSet()
}

// HasScope returns a boolean if a field has been set.
func (o *UserResetPassword) HasScope() bool {
	if o != nil && o.Scope.IsSet() {
		return true
	}

	return false
}

// SetScope gets a reference to the given NullableString and assigns it to the Scope field.
func (o *UserResetPassword) SetScope(v string) {
	o.Scope.Set(&v)
}
// SetScopeNil sets the value for Scope to be an explicit nil
func (o *UserResetPassword) SetScopeNil() {
	o.Scope.Set(nil)
}

// UnsetScope ensures that no value is present for Scope, not even an explicit nil
func (o *UserResetPassword) UnsetScope() {
	o.Scope.Unset()
}

// GetTenentId returns the TenentId field value
func (o *UserResetPassword) GetTenentId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.TenentId
}

// GetTenentIdOk returns a tuple with the TenentId field value
// and a boolean to check if the value has been set.
func (o *UserResetPassword) GetTenentIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TenentId, true
}

// SetTenentId sets field value
func (o *UserResetPassword) SetTenentId(v int64) {
	o.TenentId = v
}

func (o UserResetPassword) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserResetPassword) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Scope.IsSet() {
		toSerialize["scope"] = o.Scope.Get()
	}
	toSerialize["tenent_id"] = o.TenentId
	return toSerialize, nil
}

func (o *UserResetPassword) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"tenent_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUserResetPassword := _UserResetPassword{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUserResetPassword)

	if err != nil {
		return err
	}

	*o = UserResetPassword(varUserResetPassword)

	return err
}

type NullableUserResetPassword struct {
	value *UserResetPassword
	isSet bool
}

func (v NullableUserResetPassword) Get() *UserResetPassword {
	return v.value
}

func (v *NullableUserResetPassword) Set(val *UserResetPassword) {
	v.value = val
	v.isSet = true
}

func (v NullableUserResetPassword) IsSet() bool {
	return v.isSet
}

func (v *NullableUserResetPassword) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserResetPassword(val *UserResetPassword) *NullableUserResetPassword {
	return &NullableUserResetPassword{value: val, isSet: true}
}

func (v NullableUserResetPassword) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserResetPassword) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


