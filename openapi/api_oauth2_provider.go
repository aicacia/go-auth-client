/*
auth

auth

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// Oauth2ProviderAPIService Oauth2ProviderAPI service
type Oauth2ProviderAPIService service

type ApiCreateTenentOauth2ProviderRequest struct {
	ctx context.Context
	ApiService *Oauth2ProviderAPIService
	tenentId int64
	createTenentOAuth2Provider *CreateTenentOAuth2Provider
}

func (r ApiCreateTenentOauth2ProviderRequest) CreateTenentOAuth2Provider(createTenentOAuth2Provider CreateTenentOAuth2Provider) ApiCreateTenentOauth2ProviderRequest {
	r.createTenentOAuth2Provider = &createTenentOAuth2Provider
	return r
}

func (r ApiCreateTenentOauth2ProviderRequest) Execute() (*TenentOAuth2Provider, *http.Response, error) {
	return r.ApiService.CreateTenentOauth2ProviderExecute(r)
}

/*
CreateTenentOauth2Provider Method for CreateTenentOauth2Provider

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param tenentId Tenent ID
 @return ApiCreateTenentOauth2ProviderRequest
*/
func (a *Oauth2ProviderAPIService) CreateTenentOauth2Provider(ctx context.Context, tenentId int64) ApiCreateTenentOauth2ProviderRequest {
	return ApiCreateTenentOauth2ProviderRequest{
		ApiService: a,
		ctx: ctx,
		tenentId: tenentId,
	}
}

// Execute executes the request
//  @return TenentOAuth2Provider
func (a *Oauth2ProviderAPIService) CreateTenentOauth2ProviderExecute(r ApiCreateTenentOauth2ProviderRequest) (*TenentOAuth2Provider, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *TenentOAuth2Provider
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "Oauth2ProviderAPIService.CreateTenentOauth2Provider")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/tenents/{tenent_id}/oauth2-providers"
	localVarPath = strings.Replace(localVarPath, "{"+"tenent_id"+"}", url.PathEscape(parameterValueToString(r.tenentId, "tenentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.createTenentOAuth2Provider == nil {
		return localVarReturnValue, nil, reportError("createTenentOAuth2Provider is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.createTenentOAuth2Provider
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Errors
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Errors
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v Errors
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v Errors
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 501 {
			var v Errors
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteTenentOauth2ProviderRequest struct {
	ctx context.Context
	ApiService *Oauth2ProviderAPIService
	tenentId int64
	tenentOauht2ProviderId int64
}

func (r ApiDeleteTenentOauth2ProviderRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteTenentOauth2ProviderExecute(r)
}

/*
DeleteTenentOauth2Provider Method for DeleteTenentOauth2Provider

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param tenentId Tenent ID
 @param tenentOauht2ProviderId OAuth2 Provider ID
 @return ApiDeleteTenentOauth2ProviderRequest
*/
func (a *Oauth2ProviderAPIService) DeleteTenentOauth2Provider(ctx context.Context, tenentId int64, tenentOauht2ProviderId int64) ApiDeleteTenentOauth2ProviderRequest {
	return ApiDeleteTenentOauth2ProviderRequest{
		ApiService: a,
		ctx: ctx,
		tenentId: tenentId,
		tenentOauht2ProviderId: tenentOauht2ProviderId,
	}
}

// Execute executes the request
func (a *Oauth2ProviderAPIService) DeleteTenentOauth2ProviderExecute(r ApiDeleteTenentOauth2ProviderRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "Oauth2ProviderAPIService.DeleteTenentOauth2Provider")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/tenents/{tenent_id}/oauth2-providers/{tenent_oauht2_provider_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"tenent_id"+"}", url.PathEscape(parameterValueToString(r.tenentId, "tenentId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"tenent_oauht2_provider_id"+"}", url.PathEscape(parameterValueToString(r.tenentOauht2ProviderId, "tenentOauht2ProviderId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Errors
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Errors
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Errors
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v Errors
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUpdateTenentOauth2ProviderRequest struct {
	ctx context.Context
	ApiService *Oauth2ProviderAPIService
	tenentId int64
	tenentOauht2ProviderId int64
	updateTenentOAuth2Provider *UpdateTenentOAuth2Provider
}

func (r ApiUpdateTenentOauth2ProviderRequest) UpdateTenentOAuth2Provider(updateTenentOAuth2Provider UpdateTenentOAuth2Provider) ApiUpdateTenentOauth2ProviderRequest {
	r.updateTenentOAuth2Provider = &updateTenentOAuth2Provider
	return r
}

func (r ApiUpdateTenentOauth2ProviderRequest) Execute() (*http.Response, error) {
	return r.ApiService.UpdateTenentOauth2ProviderExecute(r)
}

/*
UpdateTenentOauth2Provider Method for UpdateTenentOauth2Provider

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param tenentId Tenent ID
 @param tenentOauht2ProviderId OAuth2 Provider ID
 @return ApiUpdateTenentOauth2ProviderRequest
*/
func (a *Oauth2ProviderAPIService) UpdateTenentOauth2Provider(ctx context.Context, tenentId int64, tenentOauht2ProviderId int64) ApiUpdateTenentOauth2ProviderRequest {
	return ApiUpdateTenentOauth2ProviderRequest{
		ApiService: a,
		ctx: ctx,
		tenentId: tenentId,
		tenentOauht2ProviderId: tenentOauht2ProviderId,
	}
}

// Execute executes the request
func (a *Oauth2ProviderAPIService) UpdateTenentOauth2ProviderExecute(r ApiUpdateTenentOauth2ProviderRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "Oauth2ProviderAPIService.UpdateTenentOauth2Provider")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/tenents/{tenent_id}/oauth2-providers/{tenent_oauht2_provider_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"tenent_id"+"}", url.PathEscape(parameterValueToString(r.tenentId, "tenentId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"tenent_oauht2_provider_id"+"}", url.PathEscape(parameterValueToString(r.tenentOauht2ProviderId, "tenentOauht2ProviderId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.updateTenentOAuth2Provider == nil {
		return nil, reportError("updateTenentOAuth2Provider is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.updateTenentOAuth2Provider
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Errors
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Errors
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Errors
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v Errors
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
