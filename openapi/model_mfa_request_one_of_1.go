/*
auth

auth

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the MFARequestOneOf1 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MFARequestOneOf1{}

// MFARequestOneOf1 struct for MFARequestOneOf1
type MFARequestOneOf1 struct {
	Code string `json:"code"`
	Type string `json:"type"`
}

type _MFARequestOneOf1 MFARequestOneOf1

// NewMFARequestOneOf1 instantiates a new MFARequestOneOf1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMFARequestOneOf1(code string, type_ string) *MFARequestOneOf1 {
	this := MFARequestOneOf1{}
	this.Code = code
	this.Type = type_
	return &this
}

// NewMFARequestOneOf1WithDefaults instantiates a new MFARequestOneOf1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMFARequestOneOf1WithDefaults() *MFARequestOneOf1 {
	this := MFARequestOneOf1{}
	return &this
}

// GetCode returns the Code field value
func (o *MFARequestOneOf1) GetCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Code
}

// GetCodeOk returns a tuple with the Code field value
// and a boolean to check if the value has been set.
func (o *MFARequestOneOf1) GetCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Code, true
}

// SetCode sets field value
func (o *MFARequestOneOf1) SetCode(v string) {
	o.Code = v
}

// GetType returns the Type field value
func (o *MFARequestOneOf1) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *MFARequestOneOf1) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *MFARequestOneOf1) SetType(v string) {
	o.Type = v
}

func (o MFARequestOneOf1) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MFARequestOneOf1) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["code"] = o.Code
	toSerialize["type"] = o.Type
	return toSerialize, nil
}

func (o *MFARequestOneOf1) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"code",
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMFARequestOneOf1 := _MFARequestOneOf1{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMFARequestOneOf1)

	if err != nil {
		return err
	}

	*o = MFARequestOneOf1(varMFARequestOneOf1)

	return err
}

type NullableMFARequestOneOf1 struct {
	value *MFARequestOneOf1
	isSet bool
}

func (v NullableMFARequestOneOf1) Get() *MFARequestOneOf1 {
	return v.value
}

func (v *NullableMFARequestOneOf1) Set(val *MFARequestOneOf1) {
	v.value = val
	v.isSet = true
}

func (v NullableMFARequestOneOf1) IsSet() bool {
	return v.isSet
}

func (v *NullableMFARequestOneOf1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMFARequestOneOf1(val *MFARequestOneOf1) *NullableMFARequestOneOf1 {
	return &NullableMFARequestOneOf1{value: val, isSet: true}
}

func (v NullableMFARequestOneOf1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMFARequestOneOf1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


