/*
auth

auth

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the UserInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserInfo{}

// UserInfo struct for UserInfo
type UserInfo struct {
	Address NullableString `json:"address,omitempty"`
	Birthdate NullableTime `json:"birthdate,omitempty"`
	FamilyName NullableString `json:"family_name,omitempty"`
	Gender NullableString `json:"gender,omitempty"`
	GivenName NullableString `json:"given_name,omitempty"`
	Locale NullableString `json:"locale,omitempty"`
	MiddleName NullableString `json:"middle_name,omitempty"`
	Name NullableString `json:"name,omitempty"`
	Nickname NullableString `json:"nickname,omitempty"`
	ProfilePicture NullableString `json:"profile_picture,omitempty"`
	Website NullableString `json:"website,omitempty"`
	ZoneInfo NullableString `json:"zone_info,omitempty"`
}

// NewUserInfo instantiates a new UserInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserInfo() *UserInfo {
	this := UserInfo{}
	return &this
}

// NewUserInfoWithDefaults instantiates a new UserInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserInfoWithDefaults() *UserInfo {
	this := UserInfo{}
	return &this
}

// GetAddress returns the Address field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserInfo) GetAddress() string {
	if o == nil || IsNil(o.Address.Get()) {
		var ret string
		return ret
	}
	return *o.Address.Get()
}

// GetAddressOk returns a tuple with the Address field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserInfo) GetAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Address.Get(), o.Address.IsSet()
}

// HasAddress returns a boolean if a field has been set.
func (o *UserInfo) HasAddress() bool {
	if o != nil && o.Address.IsSet() {
		return true
	}

	return false
}

// SetAddress gets a reference to the given NullableString and assigns it to the Address field.
func (o *UserInfo) SetAddress(v string) {
	o.Address.Set(&v)
}
// SetAddressNil sets the value for Address to be an explicit nil
func (o *UserInfo) SetAddressNil() {
	o.Address.Set(nil)
}

// UnsetAddress ensures that no value is present for Address, not even an explicit nil
func (o *UserInfo) UnsetAddress() {
	o.Address.Unset()
}

// GetBirthdate returns the Birthdate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserInfo) GetBirthdate() time.Time {
	if o == nil || IsNil(o.Birthdate.Get()) {
		var ret time.Time
		return ret
	}
	return *o.Birthdate.Get()
}

// GetBirthdateOk returns a tuple with the Birthdate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserInfo) GetBirthdateOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.Birthdate.Get(), o.Birthdate.IsSet()
}

// HasBirthdate returns a boolean if a field has been set.
func (o *UserInfo) HasBirthdate() bool {
	if o != nil && o.Birthdate.IsSet() {
		return true
	}

	return false
}

// SetBirthdate gets a reference to the given NullableTime and assigns it to the Birthdate field.
func (o *UserInfo) SetBirthdate(v time.Time) {
	o.Birthdate.Set(&v)
}
// SetBirthdateNil sets the value for Birthdate to be an explicit nil
func (o *UserInfo) SetBirthdateNil() {
	o.Birthdate.Set(nil)
}

// UnsetBirthdate ensures that no value is present for Birthdate, not even an explicit nil
func (o *UserInfo) UnsetBirthdate() {
	o.Birthdate.Unset()
}

// GetFamilyName returns the FamilyName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserInfo) GetFamilyName() string {
	if o == nil || IsNil(o.FamilyName.Get()) {
		var ret string
		return ret
	}
	return *o.FamilyName.Get()
}

// GetFamilyNameOk returns a tuple with the FamilyName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserInfo) GetFamilyNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.FamilyName.Get(), o.FamilyName.IsSet()
}

// HasFamilyName returns a boolean if a field has been set.
func (o *UserInfo) HasFamilyName() bool {
	if o != nil && o.FamilyName.IsSet() {
		return true
	}

	return false
}

// SetFamilyName gets a reference to the given NullableString and assigns it to the FamilyName field.
func (o *UserInfo) SetFamilyName(v string) {
	o.FamilyName.Set(&v)
}
// SetFamilyNameNil sets the value for FamilyName to be an explicit nil
func (o *UserInfo) SetFamilyNameNil() {
	o.FamilyName.Set(nil)
}

// UnsetFamilyName ensures that no value is present for FamilyName, not even an explicit nil
func (o *UserInfo) UnsetFamilyName() {
	o.FamilyName.Unset()
}

// GetGender returns the Gender field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserInfo) GetGender() string {
	if o == nil || IsNil(o.Gender.Get()) {
		var ret string
		return ret
	}
	return *o.Gender.Get()
}

// GetGenderOk returns a tuple with the Gender field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserInfo) GetGenderOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Gender.Get(), o.Gender.IsSet()
}

// HasGender returns a boolean if a field has been set.
func (o *UserInfo) HasGender() bool {
	if o != nil && o.Gender.IsSet() {
		return true
	}

	return false
}

// SetGender gets a reference to the given NullableString and assigns it to the Gender field.
func (o *UserInfo) SetGender(v string) {
	o.Gender.Set(&v)
}
// SetGenderNil sets the value for Gender to be an explicit nil
func (o *UserInfo) SetGenderNil() {
	o.Gender.Set(nil)
}

// UnsetGender ensures that no value is present for Gender, not even an explicit nil
func (o *UserInfo) UnsetGender() {
	o.Gender.Unset()
}

// GetGivenName returns the GivenName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserInfo) GetGivenName() string {
	if o == nil || IsNil(o.GivenName.Get()) {
		var ret string
		return ret
	}
	return *o.GivenName.Get()
}

// GetGivenNameOk returns a tuple with the GivenName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserInfo) GetGivenNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.GivenName.Get(), o.GivenName.IsSet()
}

// HasGivenName returns a boolean if a field has been set.
func (o *UserInfo) HasGivenName() bool {
	if o != nil && o.GivenName.IsSet() {
		return true
	}

	return false
}

// SetGivenName gets a reference to the given NullableString and assigns it to the GivenName field.
func (o *UserInfo) SetGivenName(v string) {
	o.GivenName.Set(&v)
}
// SetGivenNameNil sets the value for GivenName to be an explicit nil
func (o *UserInfo) SetGivenNameNil() {
	o.GivenName.Set(nil)
}

// UnsetGivenName ensures that no value is present for GivenName, not even an explicit nil
func (o *UserInfo) UnsetGivenName() {
	o.GivenName.Unset()
}

// GetLocale returns the Locale field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserInfo) GetLocale() string {
	if o == nil || IsNil(o.Locale.Get()) {
		var ret string
		return ret
	}
	return *o.Locale.Get()
}

// GetLocaleOk returns a tuple with the Locale field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserInfo) GetLocaleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Locale.Get(), o.Locale.IsSet()
}

// HasLocale returns a boolean if a field has been set.
func (o *UserInfo) HasLocale() bool {
	if o != nil && o.Locale.IsSet() {
		return true
	}

	return false
}

// SetLocale gets a reference to the given NullableString and assigns it to the Locale field.
func (o *UserInfo) SetLocale(v string) {
	o.Locale.Set(&v)
}
// SetLocaleNil sets the value for Locale to be an explicit nil
func (o *UserInfo) SetLocaleNil() {
	o.Locale.Set(nil)
}

// UnsetLocale ensures that no value is present for Locale, not even an explicit nil
func (o *UserInfo) UnsetLocale() {
	o.Locale.Unset()
}

// GetMiddleName returns the MiddleName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserInfo) GetMiddleName() string {
	if o == nil || IsNil(o.MiddleName.Get()) {
		var ret string
		return ret
	}
	return *o.MiddleName.Get()
}

// GetMiddleNameOk returns a tuple with the MiddleName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserInfo) GetMiddleNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.MiddleName.Get(), o.MiddleName.IsSet()
}

// HasMiddleName returns a boolean if a field has been set.
func (o *UserInfo) HasMiddleName() bool {
	if o != nil && o.MiddleName.IsSet() {
		return true
	}

	return false
}

// SetMiddleName gets a reference to the given NullableString and assigns it to the MiddleName field.
func (o *UserInfo) SetMiddleName(v string) {
	o.MiddleName.Set(&v)
}
// SetMiddleNameNil sets the value for MiddleName to be an explicit nil
func (o *UserInfo) SetMiddleNameNil() {
	o.MiddleName.Set(nil)
}

// UnsetMiddleName ensures that no value is present for MiddleName, not even an explicit nil
func (o *UserInfo) UnsetMiddleName() {
	o.MiddleName.Unset()
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserInfo) GetName() string {
	if o == nil || IsNil(o.Name.Get()) {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserInfo) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *UserInfo) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *UserInfo) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *UserInfo) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *UserInfo) UnsetName() {
	o.Name.Unset()
}

// GetNickname returns the Nickname field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserInfo) GetNickname() string {
	if o == nil || IsNil(o.Nickname.Get()) {
		var ret string
		return ret
	}
	return *o.Nickname.Get()
}

// GetNicknameOk returns a tuple with the Nickname field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserInfo) GetNicknameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Nickname.Get(), o.Nickname.IsSet()
}

// HasNickname returns a boolean if a field has been set.
func (o *UserInfo) HasNickname() bool {
	if o != nil && o.Nickname.IsSet() {
		return true
	}

	return false
}

// SetNickname gets a reference to the given NullableString and assigns it to the Nickname field.
func (o *UserInfo) SetNickname(v string) {
	o.Nickname.Set(&v)
}
// SetNicknameNil sets the value for Nickname to be an explicit nil
func (o *UserInfo) SetNicknameNil() {
	o.Nickname.Set(nil)
}

// UnsetNickname ensures that no value is present for Nickname, not even an explicit nil
func (o *UserInfo) UnsetNickname() {
	o.Nickname.Unset()
}

// GetProfilePicture returns the ProfilePicture field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserInfo) GetProfilePicture() string {
	if o == nil || IsNil(o.ProfilePicture.Get()) {
		var ret string
		return ret
	}
	return *o.ProfilePicture.Get()
}

// GetProfilePictureOk returns a tuple with the ProfilePicture field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserInfo) GetProfilePictureOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ProfilePicture.Get(), o.ProfilePicture.IsSet()
}

// HasProfilePicture returns a boolean if a field has been set.
func (o *UserInfo) HasProfilePicture() bool {
	if o != nil && o.ProfilePicture.IsSet() {
		return true
	}

	return false
}

// SetProfilePicture gets a reference to the given NullableString and assigns it to the ProfilePicture field.
func (o *UserInfo) SetProfilePicture(v string) {
	o.ProfilePicture.Set(&v)
}
// SetProfilePictureNil sets the value for ProfilePicture to be an explicit nil
func (o *UserInfo) SetProfilePictureNil() {
	o.ProfilePicture.Set(nil)
}

// UnsetProfilePicture ensures that no value is present for ProfilePicture, not even an explicit nil
func (o *UserInfo) UnsetProfilePicture() {
	o.ProfilePicture.Unset()
}

// GetWebsite returns the Website field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserInfo) GetWebsite() string {
	if o == nil || IsNil(o.Website.Get()) {
		var ret string
		return ret
	}
	return *o.Website.Get()
}

// GetWebsiteOk returns a tuple with the Website field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserInfo) GetWebsiteOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Website.Get(), o.Website.IsSet()
}

// HasWebsite returns a boolean if a field has been set.
func (o *UserInfo) HasWebsite() bool {
	if o != nil && o.Website.IsSet() {
		return true
	}

	return false
}

// SetWebsite gets a reference to the given NullableString and assigns it to the Website field.
func (o *UserInfo) SetWebsite(v string) {
	o.Website.Set(&v)
}
// SetWebsiteNil sets the value for Website to be an explicit nil
func (o *UserInfo) SetWebsiteNil() {
	o.Website.Set(nil)
}

// UnsetWebsite ensures that no value is present for Website, not even an explicit nil
func (o *UserInfo) UnsetWebsite() {
	o.Website.Unset()
}

// GetZoneInfo returns the ZoneInfo field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserInfo) GetZoneInfo() string {
	if o == nil || IsNil(o.ZoneInfo.Get()) {
		var ret string
		return ret
	}
	return *o.ZoneInfo.Get()
}

// GetZoneInfoOk returns a tuple with the ZoneInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserInfo) GetZoneInfoOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ZoneInfo.Get(), o.ZoneInfo.IsSet()
}

// HasZoneInfo returns a boolean if a field has been set.
func (o *UserInfo) HasZoneInfo() bool {
	if o != nil && o.ZoneInfo.IsSet() {
		return true
	}

	return false
}

// SetZoneInfo gets a reference to the given NullableString and assigns it to the ZoneInfo field.
func (o *UserInfo) SetZoneInfo(v string) {
	o.ZoneInfo.Set(&v)
}
// SetZoneInfoNil sets the value for ZoneInfo to be an explicit nil
func (o *UserInfo) SetZoneInfoNil() {
	o.ZoneInfo.Set(nil)
}

// UnsetZoneInfo ensures that no value is present for ZoneInfo, not even an explicit nil
func (o *UserInfo) UnsetZoneInfo() {
	o.ZoneInfo.Unset()
}

func (o UserInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Address.IsSet() {
		toSerialize["address"] = o.Address.Get()
	}
	if o.Birthdate.IsSet() {
		toSerialize["birthdate"] = o.Birthdate.Get()
	}
	if o.FamilyName.IsSet() {
		toSerialize["family_name"] = o.FamilyName.Get()
	}
	if o.Gender.IsSet() {
		toSerialize["gender"] = o.Gender.Get()
	}
	if o.GivenName.IsSet() {
		toSerialize["given_name"] = o.GivenName.Get()
	}
	if o.Locale.IsSet() {
		toSerialize["locale"] = o.Locale.Get()
	}
	if o.MiddleName.IsSet() {
		toSerialize["middle_name"] = o.MiddleName.Get()
	}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if o.Nickname.IsSet() {
		toSerialize["nickname"] = o.Nickname.Get()
	}
	if o.ProfilePicture.IsSet() {
		toSerialize["profile_picture"] = o.ProfilePicture.Get()
	}
	if o.Website.IsSet() {
		toSerialize["website"] = o.Website.Get()
	}
	if o.ZoneInfo.IsSet() {
		toSerialize["zone_info"] = o.ZoneInfo.Get()
	}
	return toSerialize, nil
}

type NullableUserInfo struct {
	value *UserInfo
	isSet bool
}

func (v NullableUserInfo) Get() *UserInfo {
	return v.value
}

func (v *NullableUserInfo) Set(val *UserInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableUserInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableUserInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserInfo(val *UserInfo) *NullableUserInfo {
	return &NullableUserInfo{value: val, isSet: true}
}

func (v NullableUserInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


