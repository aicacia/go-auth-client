/*
auth

auth

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the UserConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserConfig{}

// UserConfig struct for UserConfig
type UserConfig struct {
	MfaType NullableString `json:"mfa_type,omitempty"`
}

// NewUserConfig instantiates a new UserConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserConfig() *UserConfig {
	this := UserConfig{}
	return &this
}

// NewUserConfigWithDefaults instantiates a new UserConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserConfigWithDefaults() *UserConfig {
	this := UserConfig{}
	return &this
}

// GetMfaType returns the MfaType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserConfig) GetMfaType() string {
	if o == nil || IsNil(o.MfaType.Get()) {
		var ret string
		return ret
	}
	return *o.MfaType.Get()
}

// GetMfaTypeOk returns a tuple with the MfaType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserConfig) GetMfaTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.MfaType.Get(), o.MfaType.IsSet()
}

// HasMfaType returns a boolean if a field has been set.
func (o *UserConfig) HasMfaType() bool {
	if o != nil && o.MfaType.IsSet() {
		return true
	}

	return false
}

// SetMfaType gets a reference to the given NullableString and assigns it to the MfaType field.
func (o *UserConfig) SetMfaType(v string) {
	o.MfaType.Set(&v)
}
// SetMfaTypeNil sets the value for MfaType to be an explicit nil
func (o *UserConfig) SetMfaTypeNil() {
	o.MfaType.Set(nil)
}

// UnsetMfaType ensures that no value is present for MfaType, not even an explicit nil
func (o *UserConfig) UnsetMfaType() {
	o.MfaType.Unset()
}

func (o UserConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.MfaType.IsSet() {
		toSerialize["mfa_type"] = o.MfaType.Get()
	}
	return toSerialize, nil
}

type NullableUserConfig struct {
	value *UserConfig
	isSet bool
}

func (v NullableUserConfig) Get() *UserConfig {
	return v.value
}

func (v *NullableUserConfig) Set(val *UserConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableUserConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableUserConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserConfig(val *UserConfig) *NullableUserConfig {
	return &NullableUserConfig{value: val, isSet: true}
}

func (v NullableUserConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


